"use strict";

var Module = function ($) {

    function _getUrl() {
        var query = location.search.substr(1);
        var result = {};

        query.split("&").forEach(function (part) {
            var item = part.split("=");
            result[item[0]] = decodeURIComponent(item[1]);
        });

        return result;
    }

    function _setUrl(name, parameter) {
        var _url = _getUrl();

        _url[name] = parameter;

        return _url;
    }

    function _joinUrl(get) {
        var url = [];

        Object.keys(get).map(function (id) {
            if (get[id] !== 'undefined' && get[id] !== '') {
                url.push([id, get[id]].join('='));
            }
        });

        return url.join('&');
    }

    function _redirectUrl(get) {
        if (Object.keys(get).length) {
            var url = '';

            Object.keys(get).map(function (id) {
                if (id !== 'page' && get[id] !== 'undefined' && get[id] !== '') {
                    if (url !== '') {
                        url += '&';
                    }

                    url += [id, get[id]].join('=');
                }
            });

            location.search = url;
        }
    }

    return {

        changeFileName: function changeFileName(id, title) {
            console.log('ed', id, title);

            if (typeof id !== 'undefined' && typeof title !== 'undefined') {
                var name = prompt('Введите новое имя', title);

                if (name !== '' && name !== title && name !== null) {
                    $.ajax({
                        url: "/" + ADMIN_DIR + "/meta/filename",
                        type: 'POST',
                        data: {
                            id: id,
                            name: name
                        }
                    });

                    return name;
                }
            }

            return false;
        },

        ajaxFileDelete: function ajaxFileDelete(id, obj) {
            if (cp.dialog("Вы дейсвительно хотите удалить файл?")) {
                $.ajax({
                    url: '/' + ADMIN_DIR + '/meta/filedelete',
                    type: "post",
                    data: {
                        id: id
                    },
                    dataType: 'JSON',
                    success: function success(response) {
                        console.log(response);

                        if (response.status === true) {
                            $('#' + obj).remove();
                        }
                    }
                });
            }

            return false;
        },

        sort: function sort(name) {
            var _get = _getUrl();

            if (typeof _get.sort !== 'undefined') {
                var type = _get.sort.split('-')[1];
                type = type === 'asc' ? 'desc' : 'asc';
                location.search = _joinUrl(_setUrl('sort', name + '-' + type));
            } else {
                location.search = _joinUrl(_setUrl('sort', name + '-asc'));
            }
        },
        search: function search(name, value, bind, e) {
            if (bind) {
                if (e.keyCode == 13) {
                    _redirectUrl(_setUrl(name, value));
                }
            } else {
                _redirectUrl(_setUrl(name, value));
            }
        },
        reload: function reload() {
            var _get = _getUrl();

            if (typeof _get.page !== 'undefined') {
                var prev = _get.page - 1 >= 0 ? _get.page - 1 : '';

                if (prev) {
                    location.search = 'page=' + prev;
                } else {
                    location.reload();
                }
            } else {
                location.reload();
            }
        },
        setSort: function setSort(element, id, field) {
            var name = ['module', 'sorted', id].join('_');
            var value = element.value;
            var cache = $.cookie(name);

            if (cache) {
                var sort = [];
                var temp = unserialize(cache);

                if (temp[id] == 'undefined') {
                    sort[id] = {};
                    sort[id][field] = value;
                } else {
                    if (temp[id][field] == 'undefined') {
                        temp[id][field] = value;
                    } else {
                        temp[id][field] = value;
                    }

                    sort = temp;
                }

                $.removeCookie(name);
                $.cookie(name, serialize(sort), { expires: 30, path: '/' });
            } else {
                var _sort = [];

                _sort[id] = {};
                _sort[id][field] = value;

                $.cookie(name, serialize(_sort), { expires: 30, path: '/' });
            }

            setTimeout(function () {
                location.reload();
            }, 50);
        },
        setLimit: function setLimit(element, id) {
            var name = ['module', 'limit', id].join('_');
            var limit = parseInt(element.value);

            $.removeCookie(name);
            $.cookie(name, limit, { expires: 30, path: '/' });

            setTimeout(function () {
                location.reload();
            }, 50);
        },
        update: function update(e, name, id) {
            var value = Number(e.target.checked);

            $.ajax({
                url: ['/', ADMIN_DIR, '/shopping/update'].join(''),
                type: "post",
                data: {
                    id: id,
                    name: name,
                    value: value
                },
                dataType: 'JSON',
                success: function success(response) {
                    console.log('update');
                }
            });
        },
        checkAll: function checkAll(element) {
            var checked = $(element).prop('checked');
            $('.check-all-spy').prop('checked', checked);

            if (checked) {
                $('#remove-button').addClass('enable');
            } else {
                $('#remove-button').removeClass('enable');
            }
        },
        checkItem: function checkItem(element) {
            if ($('.check-all-spy:checked').length) {
                $('#remove-button').addClass('enable');
            } else {
                $('#remove-button').removeClass('enable');
            }
        },
        deleteProduct: function deleteProduct(e, id) {
            e.preventDefault();

            if (cp.dialog('Вы действительно хотите удалить товар?')) {
                this.deleteItem(id, true);
            }
        },
        deleteItem: function deleteItem(id, notify) {
            $.ajax({
                url: ['/', ADMIN_DIR, '/shopping/delete'].join(''),
                type: "post",
                data: { id: id },
                dataType: 'JSON',
                success: function success() {
                    $('#module-table').find('.module-table__row[data-id="' + id + '"]').remove();

                    if (notify) {
                        cp.notify('Товар удален', 'info');
                    }
                }
            });
        },
        deleteAll: function deleteAll(e) {
            e.preventDefault();

            var count = $('.check-all-spy:checked').length;
            var limit = $('.check-all-spy').length;

            if (count) {
                var _this = this;

                if (cp.dialog(['Вы действительно хотите удалить ', declOfNum(count, ['товар', 'товара', 'товаров']), '?'].join(''))) {
                    $('.check-all-spy:checked').each(function (k, element) {
                        _this.deleteItem(parseInt($(element).val()), false);

                        if (k + 1 == count) {
                            cp.notify(['Удалено ', declOfNum(count, ['товар', 'товара', 'товаров'])].join(''), 'info');

                            setTimeout(function () {
                                if (count == limit) {
                                    _this.reload();
                                } else {
                                    location.reload();
                                }
                            }, 150);
                        }
                    });
                }
            }
        }
    };
}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyJdLCJuYW1lcyI6WyJNb2R1bGUiLCIkIiwiX2dldFVybCIsInF1ZXJ5IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHIiLCJyZXN1bHQiLCJzcGxpdCIsImZvckVhY2giLCJwYXJ0IiwiaXRlbSIsImRlY29kZVVSSUNvbXBvbmVudCIsIl9zZXRVcmwiLCJuYW1lIiwicGFyYW1ldGVyIiwiX3VybCIsIl9qb2luVXJsIiwiZ2V0IiwidXJsIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImlkIiwicHVzaCIsImpvaW4iLCJfcmVkaXJlY3RVcmwiLCJsZW5ndGgiLCJjaGFuZ2VGaWxlTmFtZSIsInRpdGxlIiwiY29uc29sZSIsImxvZyIsInByb21wdCIsImFqYXgiLCJBRE1JTl9ESVIiLCJ0eXBlIiwiZGF0YSIsImFqYXhGaWxlRGVsZXRlIiwib2JqIiwiY3AiLCJkaWFsb2ciLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJyZXNwb25zZSIsInN0YXR1cyIsInJlbW92ZSIsInNvcnQiLCJfZ2V0IiwidmFsdWUiLCJiaW5kIiwiZSIsImtleUNvZGUiLCJyZWxvYWQiLCJwYWdlIiwicHJldiIsInNldFNvcnQiLCJlbGVtZW50IiwiZmllbGQiLCJjYWNoZSIsImNvb2tpZSIsInRlbXAiLCJ1bnNlcmlhbGl6ZSIsInJlbW92ZUNvb2tpZSIsInNlcmlhbGl6ZSIsImV4cGlyZXMiLCJwYXRoIiwic2V0VGltZW91dCIsInNldExpbWl0IiwibGltaXQiLCJwYXJzZUludCIsInVwZGF0ZSIsIk51bWJlciIsInRhcmdldCIsImNoZWNrZWQiLCJjaGVja0FsbCIsInByb3AiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiY2hlY2tJdGVtIiwiZGVsZXRlUHJvZHVjdCIsInByZXZlbnREZWZhdWx0IiwiZGVsZXRlSXRlbSIsIm5vdGlmeSIsImZpbmQiLCJkZWxldGVBbGwiLCJjb3VudCIsIl90aGlzIiwiZGVjbE9mTnVtIiwiZWFjaCIsImsiLCJ2YWwiLCJqUXVlcnki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QUFELEVBQVUsUUFBVixFQUFvQixTQUFwQixDQUFqQixDQUFyQyxFQUF1RixHQUF2RixFQUE0RjVELElBQTVGLENBQWlHLEVBQWpHLENBQVYsQ0FBSixFQUNBO0FBQ0l4QixzQkFBRSx3QkFBRixFQUE0QnVGLElBQTVCLENBQWlDLFVBQUNDLENBQUQsRUFBSWpDLE9BQUosRUFBZ0I7QUFDN0M4Qiw4QkFBTUwsVUFBTixDQUFpQlosU0FBU3BFLEVBQUV1RCxPQUFGLEVBQVdrQyxHQUFYLEVBQVQsQ0FBakIsRUFBNkMsS0FBN0M7O0FBRUEsNEJBQUtELElBQUksQ0FBTCxJQUFXSixLQUFmLEVBQXNCO0FBQ2xCOUMsK0JBQUcyQyxNQUFILENBQVUsQ0FBQyxVQUFELEVBQWFLLFVBQVVGLEtBQVYsRUFBaUIsQ0FBQyxPQUFELEVBQVUsUUFBVixFQUFvQixTQUFwQixDQUFqQixDQUFiLEVBQStENUQsSUFBL0QsQ0FBb0UsRUFBcEUsQ0FBVixFQUFtRixNQUFuRjs7QUFFQXlDLHVDQUFXLFlBQU07QUFDYixvQ0FBSW1CLFNBQVNqQixLQUFiLEVBQW9CO0FBQ2hCa0IsMENBQU1sQyxNQUFOO0FBQ0gsaUNBRkQsTUFFTztBQUNIaEQsNkNBQVNnRCxNQUFUO0FBQ0g7QUFDSiw2QkFORCxFQU1HLEdBTkg7QUFPSDtBQUNKLHFCQWREO0FBZUg7QUFDSjtBQUNKO0FBblBFLEtBQVA7QUFxUEgsQ0F6U2UsQ0F5U2R1QyxNQXpTYyxDQUFoQiIsImZpbGUiOiJtb2R1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBNb2R1bGUgPSAoZnVuY3Rpb24oJCkge1xuICAgIFxuICAgIGZ1bmN0aW9uIF9nZXRVcmwoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gbG9jYXRpb24uc2VhcmNoLnN1YnN0cigxKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG5cbiAgICAgICAgcXVlcnkuc3BsaXQoXCImXCIpLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHBhcnQuc3BsaXQoXCI9XCIpO1xuICAgICAgICAgICAgcmVzdWx0W2l0ZW1bMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KGl0ZW1bMV0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9zZXRVcmwobmFtZSwgcGFyYW1ldGVyKSB7XG4gICAgICAgIGNvbnN0IF91cmwgPSBfZ2V0VXJsKCk7XG5cbiAgICAgICAgX3VybFtuYW1lXSA9IHBhcmFtZXRlcjtcblxuICAgICAgICByZXR1cm4gX3VybDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfam9pblVybChnZXQpIHtcbiAgICAgICAgY29uc3QgdXJsID0gW107XG5cbiAgICAgICAgT2JqZWN0LmtleXMoZ2V0KS5tYXAoaWQgPT4ge1xuICAgICAgICAgICAgaWYgKGdldFtpZF0gIT09ICd1bmRlZmluZWQnICYmIGdldFtpZF0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdXJsLnB1c2goW2lkLCBnZXRbaWRdXS5qb2luKCc9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdXJsLmpvaW4oJyYnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfcmVkaXJlY3RVcmwoZ2V0KSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IHVybCA9ICcnO1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhnZXQpLm1hcChpZCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlkICE9PSAncGFnZScgJiYgZ2V0W2lkXSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0W2lkXSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAnJidcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHVybCArPSBbaWQsIGdldFtpZF1dLmpvaW4oJz0nKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGxvY2F0aW9uLnNlYXJjaCA9IHVybFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBjaGFuZ2VGaWxlTmFtZTogZnVuY3Rpb24oaWQsIHRpdGxlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZWQnLCBpZCwgdGl0bGUpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mKGlkKSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKHRpdGxlKSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHByb21wdCgn0JLQstC10LTQuNGC0LUg0L3QvtCy0L7QtSDQuNC80Y8nLCB0aXRsZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmFtZSAhPT0gJycgJiYgbmFtZSAhPT0gdGl0bGUgJiYgbmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgLyR7QURNSU5fRElSfS9tZXRhL2ZpbGVuYW1lYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBhamF4RmlsZURlbGV0ZTogZnVuY3Rpb24oaWQsIG9iaikge1xuICAgICAgICAgICAgaWYgKGNwLmRpYWxvZyhcItCS0Ysg0LTQtdC50YHQstC40YLQtdC70YzQvdC+INGF0L7RgtC40YLQtSDRg9C00LDQu9C40YLRjCDRhNCw0LnQuz9cIikpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnLycgKyBBRE1JTl9ESVIgKyAnL21ldGEvZmlsZWRlbGV0ZScsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicG9zdFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogaWRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdKU09OJyxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjJytvYmopLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzb3J0IChuYW1lKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBfZ2V0ID0gX2dldFVybCgpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIF9nZXQuc29ydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IF9nZXQuc29ydC5zcGxpdCgnLScpWzFdO1xuICAgICAgICAgICAgICAgIHR5cGUgPSAodHlwZSA9PT0gJ2FzYycpID8gJ2Rlc2MnIDogJ2FzYyc7XG4gICAgICAgICAgICAgICAgbG9jYXRpb24uc2VhcmNoID0gX2pvaW5VcmwoX3NldFVybCgnc29ydCcsIG5hbWUgKyAnLScgKyB0eXBlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uLnNlYXJjaCA9IF9qb2luVXJsKF9zZXRVcmwoJ3NvcnQnLCBuYW1lICsgJy1hc2MnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VhcmNoIChuYW1lLCB2YWx1ZSwgYmluZCwgZSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGJpbmQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgIF9yZWRpcmVjdFVybChfc2V0VXJsKG5hbWUsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfcmVkaXJlY3RVcmwoX3NldFVybChuYW1lLCB2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbG9hZCAoKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBfZ2V0ID0gX2dldFVybCgpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIF9nZXQucGFnZSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IChfZ2V0LnBhZ2UgLSAxKSA+PSAwID8gKF9nZXQucGFnZSAtIDEpIDogJyc7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5zZWFyY2ggPSAncGFnZT0nK3ByZXY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzZXRTb3J0IChlbGVtZW50LCBpZCwgZmllbGQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBbJ21vZHVsZScsICdzb3J0ZWQnLCBpZF0uam9pbignXycpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSAkLmNvb2tpZShuYW1lKTtcblxuICAgICAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNvcnQgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gdW5zZXJpYWxpemUoY2FjaGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRlbXBbaWRdID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRbaWRdID0ge307XG4gICAgICAgICAgICAgICAgICAgIHNvcnRbaWRdW2ZpZWxkXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wW2lkXVtmaWVsZF0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbaWRdW2ZpZWxkXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtpZF1bZmllbGRdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzb3J0ID0gdGVtcDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkLnJlbW92ZUNvb2tpZShuYW1lKTtcbiAgICAgICAgICAgICAgICAkLmNvb2tpZShuYW1lLCBzZXJpYWxpemUoc29ydCksIHsgZXhwaXJlczogMzAsIHBhdGg6ICcvJyB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3J0ID0gW107XG5cbiAgICAgICAgICAgICAgICBzb3J0W2lkXSA9IHt9O1xuICAgICAgICAgICAgICAgIHNvcnRbaWRdW2ZpZWxkXSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgJC5jb29raWUobmFtZSwgc2VyaWFsaXplKHNvcnQpLCB7IGV4cGlyZXM6IDMwLCBwYXRoOiAnLycgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldExpbWl0IChlbGVtZW50LCBpZClcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IFsnbW9kdWxlJywgJ2xpbWl0JywgaWRdLmpvaW4oJ18nKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbWl0ID0gcGFyc2VJbnQoZWxlbWVudC52YWx1ZSk7XG5cbiAgICAgICAgICAgICQucmVtb3ZlQ29va2llKG5hbWUpO1xuICAgICAgICAgICAgJC5jb29raWUobmFtZSwgbGltaXQsIHsgZXhwaXJlczogMzAsIHBhdGg6ICcvJyB9KTtcblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlIChlLCBuYW1lLCBpZClcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIoZS50YXJnZXQuY2hlY2tlZCk7XG5cbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBbJy8nLCBBRE1JTl9ESVIsICcvc2hvcHBpbmcvdXBkYXRlJ10uam9pbignJyksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdKU09OJyxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1cGRhdGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja0FsbCAoZWxlbWVudClcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9ICQoZWxlbWVudCkucHJvcCgnY2hlY2tlZCcpO1xuICAgICAgICAgICAgJCgnLmNoZWNrLWFsbC1zcHknKS5wcm9wKCdjaGVja2VkJywgY2hlY2tlZCk7XG5cbiAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgJCgnI3JlbW92ZS1idXR0b24nKS5hZGRDbGFzcygnZW5hYmxlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJyNyZW1vdmUtYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2VuYWJsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrSXRlbSAoZWxlbWVudClcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCQoJy5jaGVjay1hbGwtc3B5OmNoZWNrZWQnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkKCcjcmVtb3ZlLWJ1dHRvbicpLmFkZENsYXNzKCdlbmFibGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnI3JlbW92ZS1idXR0b24nKS5yZW1vdmVDbGFzcygnZW5hYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlUHJvZHVjdCAoZSwgaWQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgaWYgKGNwLmRpYWxvZygn0JLRiyDQtNC10LnRgdGC0LLQuNGC0LXQu9GM0L3QviDRhdC+0YLQuNGC0LUg0YPQtNCw0LvQuNGC0Ywg0YLQvtCy0LDRgD8nKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlSXRlbSAoaWQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZUl0ZW0gKGlkLCBub3RpZnkpXG4gICAgICAgIHtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBbJy8nLCBBRE1JTl9ESVIsICcvc2hvcHBpbmcvZGVsZXRlJ10uam9pbignJyksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXG4gICAgICAgICAgICAgICAgZGF0YTogeyBpZDogaWQgfSxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ0pTT04nLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICQoJyNtb2R1bGUtdGFibGUnKS5maW5kKCcubW9kdWxlLXRhYmxlX19yb3dbZGF0YS1pZD1cIicraWQrJ1wiXScpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNwLm5vdGlmeSgn0KLQvtCy0LDRgCDRg9C00LDQu9C10L0nLCAnaW5mbycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlQWxsIChlKVxuICAgICAgICB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gJCgnLmNoZWNrLWFsbC1zcHk6Y2hlY2tlZCcpLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpbWl0ID0gJCgnLmNoZWNrLWFsbC1zcHknKS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChjb3VudClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3AuZGlhbG9nKFsn0JLRiyDQtNC10LnRgdGC0LLQuNGC0LXQu9GM0L3QviDRhdC+0YLQuNGC0LUg0YPQtNCw0LvQuNGC0YwgJywgZGVjbE9mTnVtKGNvdW50LCBbJ9GC0L7QstCw0YAnLCAn0YLQvtCy0LDRgNCwJywgJ9GC0L7QstCw0YDQvtCyJ10pLCAnPyddLmpvaW4oJycpKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5jaGVjay1hbGwtc3B5OmNoZWNrZWQnKS5lYWNoKChrLCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZWxldGVJdGVtKHBhcnNlSW50KCQoZWxlbWVudCkudmFsKCkpLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoayArIDEpID09IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Aubm90aWZ5KFsn0KPQtNCw0LvQtdC90L4gJywgZGVjbE9mTnVtKGNvdW50LCBbJ9GC0L7QstCw0YAnLCAn0YLQvtCy0LDRgNCwJywgJ9GC0L7QstCw0YDQvtCyJ10pXS5qb2luKCcnKSwgJ2luZm8nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPT0gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxNTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KGpRdWVyeSkpOyJdfQ==
