"use strict";

var Module = function ($) {

    function _getUrl() {
        var query = location.search.substr(1);
        var result = {};

        query.split("&").forEach(function (part) {
            var item = part.split("=");
            result[item[0]] = decodeURIComponent(item[1]);
        });

        return result;
    }

    function _setUrl(name, parameter) {
        var _url = _getUrl();

        _url[name] = parameter;

        return _url;
    }

    function _joinUrl(get) {
        var url = [];

        Object.keys(get).map(function (id) {
            if (get[id] !== 'undefined' && get[id] !== '') {
                url.push([id, get[id]].join('='));
            }
        });

        return url.join('&');
    }

    function _redirectUrl(get) {
        if (Object.keys(get).length) {
            var url = '';

            Object.keys(get).map(function (id) {
                if (id !== 'page' && get[id] !== 'undefined' && get[id] !== '') {
                    if (url !== '') {
                        url += '&';
                    }

                    url += [id, get[id]].join('=');
                }
            });

            location.search = url;
        }
    }

    return {

        changeFileName: function changeFileName(id, title) {
            console.log('ed', id, title);

            if (typeof id !== 'undefined' && typeof title !== 'undefined') {
                var name = prompt('Введите новое имя', title);

                if (name !== '' && name !== title && name !== null) {
                    $.ajax({
                        url: "/" + ADMIN_DIR + "/meta/filename",
                        type: 'POST',
                        data: {
                            id: id,
                            name: name
                        }
                    });

                    return name;
                }
            }

            return false;
        },

        ajaxFileDelete: function ajaxFileDelete(id, obj) {
            if (cp.dialog("Вы дейсвительно хотите удалить файл?")) {
                $.ajax({
                    url: '/' + ADMIN_DIR + '/meta/filedelete',
                    type: "post",
                    data: {
                        id: id
                    },
                    dataType: 'JSON',
                    success: function success(response) {
                        console.log(response);

                        if (response.status === true) {
                            $('#' + obj).remove();
                        }
                    }
                });
            }

            return false;
        },

        sort: function sort(name) {
            var _get = _getUrl();

            if (typeof _get.sort !== 'undefined') {
                var type = _get.sort.split('-')[1];
                type = type === 'asc' ? 'desc' : 'asc';
                location.search = _joinUrl(_setUrl('sort', name + '-' + type));
            } else {
                location.search = _joinUrl(_setUrl('sort', name + '-asc'));
            }
        },
        search: function search(name, value, bind, e) {
            if (bind) {
                if (e.keyCode == 13) {
                    _redirectUrl(_setUrl(name, value));
                }
            } else {
                _redirectUrl(_setUrl(name, value));
            }
        },
        reload: function reload() {
            var _get = _getUrl();

            if (typeof _get.page !== 'undefined') {
                var prev = _get.page - 1 >= 0 ? _get.page - 1 : '';

                if (prev) {
                    location.search = 'page=' + prev;
                } else {
                    location.reload();
                }
            } else {
                location.reload();
            }
        },
        setSort: function setSort(element, id, field) {
            var name = ['module', 'sorted', id].join('_');
            var value = element.value;
            var cache = $.cookie(name);

            if (cache) {
                var sort = [];
                var temp = unserialize(cache);

                if (temp[id] == 'undefined') {
                    sort[id] = {};
                    sort[id][field] = value;
                } else {
                    if (temp[id][field] == 'undefined') {
                        temp[id][field] = value;
                    } else {
                        temp[id][field] = value;
                    }

                    sort = temp;
                }

                $.removeCookie(name);
                $.cookie(name, serialize(sort), { expires: 30, path: '/' });
            } else {
                var _sort = [];

                _sort[id] = {};
                _sort[id][field] = value;

                $.cookie(name, serialize(_sort), { expires: 30, path: '/' });
            }

            setTimeout(function () {
                location.reload();
            }, 50);
        },
        setLimit: function setLimit(element, id) {
            var name = ['module', 'limit', id].join('_');
            var limit = parseInt(element.value);

            $.removeCookie(name);
            $.cookie(name, limit, { expires: 30, path: '/' });

            setTimeout(function () {
                location.reload();
            }, 50);
        },
        update: function update(e, name, id) {
            var value = Number(e.target.checked);

            $.ajax({
                url: ['/', ADMIN_DIR, '/shopping/update'].join(''),
                type: "post",
                data: {
                    id: id,
                    name: name,
                    value: value
                },
                dataType: 'JSON',
                success: function success(response) {
                    console.log('update');
                }
            });
        },
        checkAll: function checkAll(element) {
            var checked = $(element).prop('checked');
            $('.check-all-spy').prop('checked', checked);

            if (checked) {
                $('#remove-button').addClass('enable');
            } else {
                $('#remove-button').removeClass('enable');
            }
        },
        checkItem: function checkItem(element) {
            if ($('.check-all-spy:checked').length) {
                $('#remove-button').addClass('enable');
            } else {
                $('#remove-button').removeClass('enable');
            }
        },
        deleteQuestion: function deleteQuestion(e, element) {
            e.preventDefault();

            var isDelete = cp.dialog('Вы действительно хотите удалить позицию?');

            if (isDelete) {
                var _href = $(element).attr('href');

                $.post(_href, function () {
                    cp.notify('Позиция удалена', 'info');
                    $(element).closest('tr').remove();
                });
            }

            return false;
        },
        deleteItem: function deleteItem(id, mid, notify) {
            $.ajax({
                url: "/" + ADMIN_DIR + "/meta/module/del/" + mid + "/" + id,
                type: "post",
                data: {
                    id: id,
                    module: mid
                },
                dataType: 'JSON',
                success: function success() {
                    $('#module-table').find('.module-table__row[data-id="' + id + '"]').remove();

                    if (notify) {
                        cp.notify('Позиция удалена', 'info');
                    }
                }
            });
        },
        deleteAll: function deleteAll(e) {
            e.preventDefault();

            var count = $('.check-all-spy:checked').length;
            var limit = $('.check-all-spy').length;

            if (count) {
                var _this = this;

                if (cp.dialog(['Вы действительно хотите удалить ', declOfNum(count, ['позиция', 'позиций', 'позиции']), '?'].join(''))) {
                    $('.check-all-spy:checked').each(function (k, element) {
                        var mix = $(element).val();
                        var tmp = mix.split('_');

                        _this.deleteItem(parseInt(tmp[0]), parseInt(tmp[1]), false);

                        if (k + 1 == count) {
                            cp.notify(['Удалено ', declOfNum(count, ['позиция', 'позиций', 'позиции'])].join(''), 'info');

                            setTimeout(function () {
                                if (count == limit) {
                                    _this.reload();
                                } else {
                                    location.reload();
                                }
                            }, 150);
                        }
                    });
                }
            }
        }
    };
}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
