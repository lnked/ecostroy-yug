'use strict';

function declOfNum(n, titles) {
    var cases = [2, 0, 1, 1, 1, 2];
    n = Math.abs(n);
    return titles[n % 100 > 4 && n % 100 < 20 ? 2 : cases[n % 10 < 5 ? n % 10 : 5]];
}

// var i = 1;
// setTimeout(function run() {
//     func(i);
//     setTimeout(run, 100);
// }, 100);

// ;((d => {
//     function template(id, data) {
//         if (d.getElementById(id) !== null) {
//             return Template7.compile(d.getElementById(id).innerHTML)(data || {});
//         }
//         return '';
//     }
//     window.template = template;
// }))(document);

// const addEvent = ((() => {
//    const filter = (el, type, fn) => {
//       for (let i = 0, len = el.length; i < len; i++) {
//          addEvent(el[i], type, fn);
//       }
//    };
//    if (document.addEventListener) {
//       return (el, type, fn) => {
//          if (el && el.nodeName || el === window) {
//             el.addEventListener(type, fn, false);
//          } else if (el && el.length) {
//             filter(el, type, fn);
//          }
//       };
//    }

//    return (el, type, fn) => {
//       if (el && el.nodeName || el === window) {
//          el.attachEvent(`on${type}`, () => fn.call(el, window.event));
//       } else if (el && el.length) {
//          filter(el, type, fn);
//       }
//    };
// }))();

// // addEvent(document.getElementsByTagName('a'), 'click', fn);

// const $ = el => document.querySelectorAll(el);

// // $('.box');

// const lazyload = (container, settings) => {
//    const lazyClass = 'js-lazyload-images';
//    require(['jquery', 'lib/jquery.lazyload'], $ => {
//       const node = $(container);
//       const $lazyNode = $(`.${lazyClass}`, node);
//       $lazyNode.lazyload(settings).removeClass(lazyClass);
//       node.scroll();
//    });
// };

// /*
// window.addEventListener('popstate', e => {
//    const state = e.state;
//    if(!state) return;
//    if(state.layer) {
//       create_layer(state.layer, JSON.parse(state.settings));
//    }
// }, false);
// */

// function fullPresent(elem)
// {
//   var docViewTop = $(window).scrollTop(),
//   docViewBottom = docViewTop + $(window).height(),
//   elemTop = $(elem).offset().top,
//   elemBottom = elemTop + $(elem).height();

//   return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
// }


// function youTubeGetId(url) {
//     const expression = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be[.]?\/|youtube\.com[.]?\/(?:embed\/|v\/|watch\/?\?(?:\S+=\S*&)*v=))([\w-]{11})\S*$/;
//     return url.match(expression) ? RegExp.$1 : undefined;
// }

// function isInt(n){
//     return Number(n) === n && n % 1 === 0;
// }

// function isFloat(n){
//     return Number(n) === n && n % 1 !== 0;
// }
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbImRlY2xPZk51bSIsIm4iLCJ0aXRsZXMiLCJjYXNlcyIsIk1hdGgiLCJhYnMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLFNBQVQsQ0FBbUJDLENBQW5CLEVBQXNCQyxNQUF0QixFQUE4QjtBQUMxQixRQUFNQyxRQUFRLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsQ0FBZDtBQUNBRixRQUFJRyxLQUFLQyxHQUFMLENBQVNKLENBQVQsQ0FBSjtBQUNBLFdBQU9DLE9BQVFELElBQUksR0FBSixHQUFVLENBQVYsSUFBZUEsSUFBSSxHQUFKLEdBQVUsRUFBMUIsR0FBZ0MsQ0FBaEMsR0FBb0NFLE1BQU9GLElBQUksRUFBSixHQUFTLENBQVYsR0FBZUEsSUFBSSxFQUFuQixHQUF3QixDQUE5QixDQUEzQyxDQUFQO0FBQ0g7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiJfaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZGVjbE9mTnVtKG4sIHRpdGxlcykge1xuICAgIGNvbnN0IGNhc2VzID0gWzIsIDAsIDEsIDEsIDEsIDJdO1xuICAgIG4gPSBNYXRoLmFicyhuKTtcbiAgICByZXR1cm4gdGl0bGVzWyhuICUgMTAwID4gNCAmJiBuICUgMTAwIDwgMjApID8gMiA6IGNhc2VzWyhuICUgMTAgPCA1KSA/IG4gJSAxMCA6IDVdXTtcbn1cblxuLy8gdmFyIGkgPSAxO1xuLy8gc2V0VGltZW91dChmdW5jdGlvbiBydW4oKSB7XG4vLyAgICAgZnVuYyhpKTtcbi8vICAgICBzZXRUaW1lb3V0KHJ1biwgMTAwKTtcbi8vIH0sIDEwMCk7XG5cbi8vIDsoKGQgPT4ge1xuLy8gICAgIGZ1bmN0aW9uIHRlbXBsYXRlKGlkLCBkYXRhKSB7XG4vLyAgICAgICAgIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSAhPT0gbnVsbCkge1xuLy8gICAgICAgICAgICAgcmV0dXJuIFRlbXBsYXRlNy5jb21waWxlKGQuZ2V0RWxlbWVudEJ5SWQoaWQpLmlubmVySFRNTCkoZGF0YSB8fCB7fSk7XG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgcmV0dXJuICcnO1xuLy8gICAgIH1cbi8vICAgICB3aW5kb3cudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbi8vIH0pKShkb2N1bWVudCk7XG5cbi8vIGNvbnN0IGFkZEV2ZW50ID0gKCgoKSA9PiB7XG4vLyAgICBjb25zdCBmaWx0ZXIgPSAoZWwsIHR5cGUsIGZuKSA9PiB7XG4vLyAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbi8vICAgICAgICAgIGFkZEV2ZW50KGVsW2ldLCB0eXBlLCBmbik7XG4vLyAgICAgICB9XG4vLyAgICB9O1xuLy8gICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbi8vICAgICAgIHJldHVybiAoZWwsIHR5cGUsIGZuKSA9PiB7XG4vLyAgICAgICAgICBpZiAoZWwgJiYgZWwubm9kZU5hbWUgfHwgZWwgPT09IHdpbmRvdykge1xuLy8gICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuLy8gICAgICAgICAgfSBlbHNlIGlmIChlbCAmJiBlbC5sZW5ndGgpIHtcbi8vICAgICAgICAgICAgIGZpbHRlcihlbCwgdHlwZSwgZm4pO1xuLy8gICAgICAgICAgfVxuLy8gICAgICAgfTtcbi8vICAgIH1cbiBcbi8vICAgIHJldHVybiAoZWwsIHR5cGUsIGZuKSA9PiB7XG4vLyAgICAgICBpZiAoZWwgJiYgZWwubm9kZU5hbWUgfHwgZWwgPT09IHdpbmRvdykge1xuLy8gICAgICAgICAgZWwuYXR0YWNoRXZlbnQoYG9uJHt0eXBlfWAsICgpID0+IGZuLmNhbGwoZWwsIHdpbmRvdy5ldmVudCkpO1xuLy8gICAgICAgfSBlbHNlIGlmIChlbCAmJiBlbC5sZW5ndGgpIHtcbi8vICAgICAgICAgIGZpbHRlcihlbCwgdHlwZSwgZm4pO1xuLy8gICAgICAgfVxuLy8gICAgfTtcbi8vIH0pKSgpO1xuXG4vLyAvLyBhZGRFdmVudChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpLCAnY2xpY2snLCBmbik7XG5cbi8vIGNvbnN0ICQgPSBlbCA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKTtcblxuLy8gLy8gJCgnLmJveCcpO1xuXG4vLyBjb25zdCBsYXp5bG9hZCA9IChjb250YWluZXIsIHNldHRpbmdzKSA9PiB7XG4vLyAgICBjb25zdCBsYXp5Q2xhc3MgPSAnanMtbGF6eWxvYWQtaW1hZ2VzJztcbi8vICAgIHJlcXVpcmUoWydqcXVlcnknLCAnbGliL2pxdWVyeS5sYXp5bG9hZCddLCAkID0+IHtcbi8vICAgICAgIGNvbnN0IG5vZGUgPSAkKGNvbnRhaW5lcik7XG4vLyAgICAgICBjb25zdCAkbGF6eU5vZGUgPSAkKGAuJHtsYXp5Q2xhc3N9YCwgbm9kZSk7XG4vLyAgICAgICAkbGF6eU5vZGUubGF6eWxvYWQoc2V0dGluZ3MpLnJlbW92ZUNsYXNzKGxhenlDbGFzcyk7XG4vLyAgICAgICBub2RlLnNjcm9sbCgpO1xuLy8gICAgfSk7XG4vLyB9O1xuXG4vLyAvKlxuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZSA9PiB7XG4vLyAgICBjb25zdCBzdGF0ZSA9IGUuc3RhdGU7XG4vLyAgICBpZighc3RhdGUpIHJldHVybjtcbi8vICAgIGlmKHN0YXRlLmxheWVyKSB7XG4vLyAgICAgICBjcmVhdGVfbGF5ZXIoc3RhdGUubGF5ZXIsIEpTT04ucGFyc2Uoc3RhdGUuc2V0dGluZ3MpKTtcbi8vICAgIH1cbi8vIH0sIGZhbHNlKTtcbi8vICovXG5cbi8vIGZ1bmN0aW9uIGZ1bGxQcmVzZW50KGVsZW0pXG4vLyB7XG4vLyAgIHZhciBkb2NWaWV3VG9wID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpLFxuLy8gICBkb2NWaWV3Qm90dG9tID0gZG9jVmlld1RvcCArICQod2luZG93KS5oZWlnaHQoKSxcbi8vICAgZWxlbVRvcCA9ICQoZWxlbSkub2Zmc2V0KCkudG9wLFxuLy8gICBlbGVtQm90dG9tID0gZWxlbVRvcCArICQoZWxlbSkuaGVpZ2h0KCk7XG5cbi8vICAgcmV0dXJuICgoZWxlbUJvdHRvbSA8PSBkb2NWaWV3Qm90dG9tKSAmJiAoZWxlbVRvcCA+PSBkb2NWaWV3VG9wKSk7XG4vLyB9XG5cblxuLy8gZnVuY3Rpb24geW91VHViZUdldElkKHVybCkge1xuLy8gICAgIGNvbnN0IGV4cHJlc3Npb24gPSAvXig/Omh0dHBzPzpcXC9cXC8pPyg/Ond3d1xcLik/KD86eW91dHVcXC5iZVsuXT9cXC98eW91dHViZVxcLmNvbVsuXT9cXC8oPzplbWJlZFxcL3x2XFwvfHdhdGNoXFwvP1xcPyg/OlxcUys9XFxTKiYpKnY9KSkoW1xcdy1dezExfSlcXFMqJC87XG4vLyAgICAgcmV0dXJuIHVybC5tYXRjaChleHByZXNzaW9uKSA/IFJlZ0V4cC4kMSA6IHVuZGVmaW5lZDtcbi8vIH1cblxuLy8gZnVuY3Rpb24gaXNJbnQobil7XG4vLyAgICAgcmV0dXJuIE51bWJlcihuKSA9PT0gbiAmJiBuICUgMSA9PT0gMDtcbi8vIH1cblxuLy8gZnVuY3Rpb24gaXNGbG9hdChuKXtcbi8vICAgICByZXR1cm4gTnVtYmVyKG4pID09PSBuICYmIG4gJSAxICE9PSAwO1xuLy8gfVxuIl19

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
$.popup.init('.trigger-popup');
$.popup.open('popup-choose-photo-source');
$.popup.open('popup-choose-photo-source/nested-tab');
*/

;(function ($) {
	"use strict";

	var defaults = {
		wrapper: 'body',
		popupClass: '.popup',
		triggerClass: '.j-open-popup',
		dialogClass: '.j-popup-dialog',
		closeClass: '.j-popup-close',
		speed: 550,
		overlay: {
			enable: !0,
			element: '#overlay'
		},
		overlayClickClose: !0,
		cssPosition: !0,
		bodyclass: !0,
		hashCheck: !0,
		hashChange: !0,
		keyHooks: !0,
		template: {
			error: 'tmpl-popup-error',
			message: 'tmpl-popup-message',
			notification: 'tmpl-notification'
		}
	},
	    popup = null,
	    noty = null,
	    temp = null,
	    nested = [],
	    $dialog = '',
	    $trigger = '',
	    $body = $('body'),
	    $win = $(window),
	    $doc = $(document),
	    selector_cache,
	    notify_timeout,
	    is_nested,
	    resizeTimeout;

	$.overlay = {
		close: function close() {
			$(defaults.overlay.element).removeClass('animate');

			setTimeout(function () {
				$(defaults.overlay.element).removeClass('visible is-open');
				$(defaults.overlay.element).filter('.temp').remove();
			}, defaults.speed);
		}
	};

	$.popup = {
		_getPopup: function _getPopup(selector) {
			var $popup;

			if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) == 'object') {
				return selector;
			}

			$popup = $('#' + selector);

			return $popup.length ? $popup : null;
		},

		_getPosition: function _getPosition($popup) {
			popup = this;

			if (!defaults.cssPosition) {
				return {};
			}

			var prop = {},
			    ww = $win.width(),
			    wh = $win.height(),
			    dw = $doc.width(),
			    dh = $doc.height(),
			    pw = $popup.outerWidth(),
			    ph = $popup.outerHeight(),
			    st = $win.scrollTop(),
			    left = 0,
			    top = 0,
			    css = {},
			    posType = $popup.attr('data-position'),
			    $realWrapper = null;

			if (dw >= pw) {
				left = Math.round((dw - pw) / 2);
			}

			if (wh >= ph) {
				css.position = 'fixed';
				top = '50%';
				css.marginTop = '-' + Math.ceil(ph / 2) + 'px';
			} else {
				css.position = 'absolute';
				top = st + Math.round((wh - ph) / 2);
			}

			css.top = top;

			if (posType == 'right') {
				css.right = 0;
			} else {
				css.left = left;
			}

			return css;
		},

		_changePosition: function _changePosition(selector) {
			var $popup = this._getPopup(selector);

			if (!defaults.cssPosition) {
				$popup.css(this._getPosition($popup));
			}
		},

		_checkScroll: function _checkScroll(popup) {
			$dialog = $(popup).find(defaults.dialogClass);

			if ($dialog.outerHeight() > $win.height()) {
				$dialog.addClass('is-scrolling');
			} else {
				$dialog.removeClass('is-scrolling');
			}
		},

		close: function close(element, callback) {
			popup = this;

			var scroll = 0,
			    cb = false,
			    is_native = true,
			    $popups;

			$popups = $body.find('.popup.is-open');

			if (typeof element !== 'undefined') {
				$popups = $(element);
				is_native = false;
			}

			if (typeof callback !== 'undefined') {
				cb = true;
			}

			$body.trigger('popup.before_close', $popups);

			if (defaults.overlay.enable && is_native) {
				$.overlay.close();
			};

			$(defaults.wrapper).off('click.wrapClose');

			$popups.removeClass('animate');

			setTimeout(function () {
				$popups.removeClass('visible is-open');
				$popups.filter('.temp').remove();
				$body.trigger('popup.after_close', $popups);

				if (cb) {
					setTimeout(function () {
						window.location.hash = '';
						callback.apply();
					}, 10);
				}
			}, defaults.speed);

			if (!cb && is_native) {
				$body.removeClass('popup-open');

				if (defaults.hashChange) {
					scroll = $win.scrollTop();
					window.location.hash = '';
					$win.scrollTop(scroll);
				}
			}

			$body.trigger('popup.close', $popups);

			return this;
		},

		initWrapClose: function initWrapClose() {
			popup = this;

			$(defaults.wrapper).on('click.wrapClose', function (e) {
				if (!$(e.target).closest(defaults.popupClass).length && !$(e.target).hasClass(defaults.triggerClass.substr(1)) && !$(e.target).closest(defaults.triggerClass).length) {
					popup.close();
				}
			});
		},

		hooks: function hooks() {
			popup = this;

			$body.on('click', defaults.closeClass, function (e) {
				e.preventDefault ? e.preventDefault() : e.returnValue = false;
				popup.close();
			});

			if (defaults.keyHooks) {
				$body.on('keypress keydown', function (e) {
					if (e.keyCode == 27) {
						popup.close();
					}
				});
			};

			if (defaults.overlay.enable && defaults.overlayClickClose) {
				$(defaults.overlay.element).on('click', function () {
					popup.close();
				});
			}

			$win.on('resize.popup', function () {
				clearTimeout(resizeTimeout);

				resizeTimeout = setTimeout(function () {

					$body.find('.popup.is-open').each(function () {
						if (!defaults.cssPosition) {
							popup._changePosition($(this));
						}

						popup._checkScroll($(this));
					});
				}, 100);
			});

			return this;
		},

		show: function show(selector, overlay, bodyclass) {
			var $popup = null;
			popup = this;

			if (typeof selector !== 'undefined' && selector !== '') {
				var data = data || {},
				    prop = {},
				    $popup;

				if (bodyclass) {
					$body.addClass('popup-open');
				}

				if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) == 'object') {
					$popup = $(selector);
				} else {
					if ($('#' + selector).hasClass('popup')) {
						$popup = $('#' + selector);
					} else if ($('#' + selector).length && $('#' + selector).get(0).tagName == 'SCRIPT' || $('#' + selector).get(0).tagName == 'TEMPLATE') {
						$popup = $(template(selector, data));
						$popup.addClass('temp');

						$body.append($popup);
					}
				}

				if ($popup) {
					$popup.addClass('visible is-open');

					if (!defaults.cssPosition) {
						$popup.css(popup._getPosition($popup));
					}

					if (overlay) {
						$(defaults.overlay.element).addClass('visible');

						setTimeout(function () {
							$(defaults.overlay.element).addClass('animate');
						}, 10);
					} else {
						this.initWrapClose();
					}

					popup._checkScroll($popup);

					setTimeout(function () {
						$popup.addClass('animate');
						$body.trigger('popup.after_open', $popup);

						setTimeout(function () {
							$popup.scrollTop(0);
						}, 10);

						if (nested.length) {
							$body.trigger('popup.init_nested', { popup: $popup, nested: nested });
						}
					}, 10);

					$body.trigger('popup.open', $popup);
				}
			}

			return this;
		},

		clicks: function clicks(trigger) {
			popup = this;

			$body.on('click', trigger, function (e) {
				var overlay = defaults.overlay.enable,
				    bodyclass = defaults.bodyclass,
				    element;

				if ($('.popup.is-open').length) {
					$body.trigger('popup.before_open', $('.popup.is-open'));
				}

				if (!defaults.hashChange) {
					e.preventDefault ? e.preventDefault() : e.returnValue = false;
				}

				if (typeof $(this).data('bodyclass') !== 'undefined') {
					bodyclass = $(this).data('bodyclass');
				}

				if (typeof $(this).data('overlay') !== 'undefined') {
					overlay = $(this).data('overlay');
				}

				if ($(this).data('popup')) {
					element = $(this).data('popup');
				} else if ($(this).attr('href')) {
					element = $(this).attr('href');
				}

				popup.open(element, overlay, bodyclass);

				if (typeof $(this).data('hashchange') !== 'undefined') {
					return $(this).data('hashchange');
				}
			});

			return this;
		},

		open: function open(selector, overlay, bodyclass) {
			popup = this;

			if (typeof selector !== 'undefined' && selector.length > 1 && selector.substr(0, 1) !== '#') {
				selector = '#' + selector;
			}

			temp = null, selector_cache = null, nested = [];

			if (typeof selector == 'undefined' && defaults.hashChange && window.location.hash.length > 1) {
				temp = window.location.hash;
			} else if (typeof selector !== 'undefined') {
				if (selector.substr(0, 1) == '#') {
					temp = selector;
				}
			}

			if (temp !== null && temp.indexOf('/') >= 0) {
				nested = temp.split('/');
			}

			is_nested = false;
			selector = temp;

			if (nested.length) {
				is_nested = true;
				selector = nested[0];
				nested = nested.slice(1);
			}

			if (typeof selector !== 'undefined' && selector !== null) {
				if (selector.substr(0, 1) == '#') {
					selector = selector.substr(1);
				}

				if ($('.popup.is-open').length) {
					selector_cache = $('.popup.is-open').attr('id');

					if (is_nested && !nested.length || selector !== selector_cache) {
						popup.close($('.popup.is-open'));
					} else {
						$.app.tabs.hashUrl.check(popup, nested);
					}
				}

				if ($('#tpl-' + selector).length) {
					selector = 'tpl-' + selector;
				}

				if ($('#tmpl-' + selector).length) {
					selector = 'tmpl-' + selector;
				}

				if (typeof overlay == 'undefined') {
					overlay = defaults.overlay.enable;
				}

				if (typeof bodyclass == 'undefined') {
					bodyclass = defaults.bodyclass;
				}

				if ($('#' + selector).hasClass('popup') || $('#' + selector).length && $('#' + selector).get(0).tagName == 'SCRIPT' || $('#' + selector).length && $('#' + selector).get(0).tagName == 'TEMPLATE') {
					popup.show(selector, overlay, bodyclass);
				}
			}

			return this;
		},

		notification: function notification(title, text) {
			popup = this;

			clearTimeout(notify_timeout);

			if (!$body.find('#alert-popup-notification').length) {
				noty = $(template(defaults.template.notification, { 'title': title, 'text': text }));

				noty.addClass('temp');
				noty.attr('id', 'alert-popup-notification');

				$body.append(noty);

				popup.show(noty, false, false);
			}

			notify_timeout = setTimeout(function () {

				noty.removeClass('animate');

				setTimeout(function () {

					noty.remove();
				}, 300);
			}, 5000);
		},

		message: function message(title, text, btn) {
			popup = this;

			var temp = $(template(defaults.template.message, { 'title': title, 'text': text, 'btn': btn || null }));

			temp.addClass('temp');

			$body.append(temp);

			temp.css(this._getPosition(temp));

			popup.close($body.find('.popup.is-open'), function () {
				popup.show(temp);
			});
		},

		error: function error(title, text) {
			popup = this;

			var temp = $(template(defaults.template.error, { 'title': title, 'text': text }));

			temp.addClass('temp');

			$body.append(temp);

			temp.css(this._getPosition(temp));

			popup.close($body.find('.popup.is-open'), function () {
				popup.show(temp);
			});
		},

		init: function init(trigger, options) {
			defaults.triggerClass = trigger;

			if (typeof options !== 'undefined') {
				for (var x in options) {
					if (typeof defaults[x] !== 'undefined') {
						defaults[x] = options[x];
					}
				}
			}

			this.open();
			this.clicks(trigger);
			this.hooks();
		}
	};
})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * SVG Fixer
 *
 * Fixes references to inline SVG elements when the <base> tag is in use.
 * Firefox won't display SVG icons referenced with
 * `<svg><use xlink:href="#id-of-icon-def"></use></svg>` when the <base> tag is on the page.
 *
 * More info:
 * - http://stackoverflow.com/a/18265336/796152
 * - http://www.w3.org/TR/SVG/linking.html
 *
 * One would think that setting the `xml:base` attribute fixes things,
 * but that is being removed from the platform: https://code.google.com/p/chromium/issues/detail?id=341854
 */

(function (document, window) {
    "use strict";

    /**
    * Initialize the SVG Fixer after the DOM is ready
    */

    document.addEventListener("DOMContentLoaded", function () {

        /**
         * Current URL, without the hash
         */
        var baseUrl = window.location.href.replace(window.location.hash, "");

        /**
        *  Find all `use` elements with a namespaced `href` attribute, e.g.
        *  <use xlink:href="#some-id"></use>
        *
        *  See: http://stackoverflow.com/a/23047888/796152
        */
        [].slice.call(document.querySelectorAll("use[*|href]"))

        /**
        * Filter out all elements whose namespaced `href` attribute doesn't
        * start with `#` (i.e. all non-relative IRI's)
        *
        * Note: we're assuming the `xlink` prefix for the XLink namespace!
        */
        .filter(function (element) {
            return element.getAttribute("xlink:href").indexOf("#") === 0;
        })

        /**
        * Prepend `window.location` to the namespaced `href` attribute value,
        * in order to make it an absolute IRI
        *
        * Note: we're assuming the `xlink` prefix for the XLink namespace!
        */
        .forEach(function (element) {
            element.setAttribute("xlink:href", baseUrl + element.getAttribute("xlink:href"));
        });
    }, false);
})(document, window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdmdmaXhlci5qcyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJiYXNlVXJsIiwibG9jYXRpb24iLCJocmVmIiwicmVwbGFjZSIsImhhc2giLCJzbGljZSIsImNhbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmlsdGVyIiwiZWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImluZGV4T2YiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUMsV0FBU0EsUUFBVCxFQUFtQkMsTUFBbkIsRUFBMkI7QUFDeEI7O0FBRUE7Ozs7QUFHQUQsYUFBU0UsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFlBQVc7O0FBRXJEOzs7QUFHQSxZQUFJQyxVQUFVRixPQUFPRyxRQUFQLENBQWdCQyxJQUFoQixDQUNUQyxPQURTLENBQ0RMLE9BQU9HLFFBQVAsQ0FBZ0JHLElBRGYsRUFDcUIsRUFEckIsQ0FBZDs7QUFHQTs7Ozs7O0FBTUEsV0FBR0MsS0FBSCxDQUFTQyxJQUFULENBQWNULFNBQVNVLGdCQUFULENBQTBCLGFBQTFCLENBQWQ7O0FBRUk7Ozs7OztBQUZKLFNBUUtDLE1BUkwsQ0FRWSxVQUFTQyxPQUFULEVBQWtCO0FBQ3RCLG1CQUFRQSxRQUFRQyxZQUFSLENBQXFCLFlBQXJCLEVBQW1DQyxPQUFuQyxDQUEyQyxHQUEzQyxNQUFvRCxDQUE1RDtBQUNILFNBVkw7O0FBWUk7Ozs7OztBQVpKLFNBa0JLQyxPQWxCTCxDQWtCYSxVQUFTSCxPQUFULEVBQWtCO0FBQ3ZCQSxvQkFBUUksWUFBUixDQUFxQixZQUFyQixFQUFtQ2IsVUFBVVMsUUFBUUMsWUFBUixDQUFxQixZQUFyQixDQUE3QztBQUNILFNBcEJMO0FBc0JILEtBcENELEVBb0NHLEtBcENIO0FBc0NILENBNUNBLEVBNENDYixRQTVDRCxFQTRDV0MsTUE1Q1gsQ0FBRCIsImZpbGUiOiJfc3ZnZml4ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNWRyBGaXhlclxuICpcbiAqIEZpeGVzIHJlZmVyZW5jZXMgdG8gaW5saW5lIFNWRyBlbGVtZW50cyB3aGVuIHRoZSA8YmFzZT4gdGFnIGlzIGluIHVzZS5cbiAqIEZpcmVmb3ggd29uJ3QgZGlzcGxheSBTVkcgaWNvbnMgcmVmZXJlbmNlZCB3aXRoXG4gKiBgPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCIjaWQtb2YtaWNvbi1kZWZcIj48L3VzZT48L3N2Zz5gIHdoZW4gdGhlIDxiYXNlPiB0YWcgaXMgb24gdGhlIHBhZ2UuXG4gKlxuICogTW9yZSBpbmZvOlxuICogLSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xODI2NTMzNi83OTYxNTJcbiAqIC0gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2xpbmtpbmcuaHRtbFxuICpcbiAqIE9uZSB3b3VsZCB0aGluayB0aGF0IHNldHRpbmcgdGhlIGB4bWw6YmFzZWAgYXR0cmlidXRlIGZpeGVzIHRoaW5ncyxcbiAqIGJ1dCB0aGF0IGlzIGJlaW5nIHJlbW92ZWQgZnJvbSB0aGUgcGxhdGZvcm06IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNDE4NTRcbiAqL1xuXG4oZnVuY3Rpb24oZG9jdW1lbnQsIHdpbmRvdykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLyoqXG4gICAgKiBJbml0aWFsaXplIHRoZSBTVkcgRml4ZXIgYWZ0ZXIgdGhlIERPTSBpcyByZWFkeVxuICAgICovXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnQgVVJMLCB3aXRob3V0IHRoZSBoYXNoXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgYmFzZVVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgICAgICAgICAucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaGFzaCwgXCJcIik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogIEZpbmQgYWxsIGB1c2VgIGVsZW1lbnRzIHdpdGggYSBuYW1lc3BhY2VkIGBocmVmYCBhdHRyaWJ1dGUsIGUuZy5cbiAgICAgICAgKiAgPHVzZSB4bGluazpocmVmPVwiI3NvbWUtaWRcIj48L3VzZT5cbiAgICAgICAgKlxuICAgICAgICAqICBTZWU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIzMDQ3ODg4Lzc5NjE1MlxuICAgICAgICAqL1xuICAgICAgICBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ1c2VbKnxocmVmXVwiKSlcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEZpbHRlciBvdXQgYWxsIGVsZW1lbnRzIHdob3NlIG5hbWVzcGFjZWQgYGhyZWZgIGF0dHJpYnV0ZSBkb2Vzbid0XG4gICAgICAgICAgICAqIHN0YXJ0IHdpdGggYCNgIChpLmUuIGFsbCBub24tcmVsYXRpdmUgSVJJJ3MpXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIE5vdGU6IHdlJ3JlIGFzc3VtaW5nIHRoZSBgeGxpbmtgIHByZWZpeCBmb3IgdGhlIFhMaW5rIG5hbWVzcGFjZSFcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwieGxpbms6aHJlZlwiKS5pbmRleE9mKFwiI1wiKSA9PT0gMCk7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogUHJlcGVuZCBgd2luZG93LmxvY2F0aW9uYCB0byB0aGUgbmFtZXNwYWNlZCBgaHJlZmAgYXR0cmlidXRlIHZhbHVlLFxuICAgICAgICAgICAgKiBpbiBvcmRlciB0byBtYWtlIGl0IGFuIGFic29sdXRlIElSSVxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBOb3RlOiB3ZSdyZSBhc3N1bWluZyB0aGUgYHhsaW5rYCBwcmVmaXggZm9yIHRoZSBYTGluayBuYW1lc3BhY2UhXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwieGxpbms6aHJlZlwiLCBiYXNlVXJsICsgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bGluazpocmVmXCIpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgfSwgZmFsc2UpO1xuXG59KGRvY3VtZW50LCB3aW5kb3cpKTtcbiJdfQ==

;(function (d) {
    function template(id, data) {
        if (d.getElementById(id) !== null) {
            var pattern = d.getElementById(id).innerHTML;

            // if (!window.precompiledT7) {
            //     window.precompiledT7 = Template7.compile(pattern);
            // }
            // return window.precompiledT7(data || {});

            return Template7.compile(pattern)(data || {});
        }

        return '';
    }

    window.template = template;
})(document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl90ZW1wbGF0ZS5qcyJdLCJuYW1lcyI6WyJ0ZW1wbGF0ZSIsImlkIiwiZGF0YSIsImQiLCJnZXRFbGVtZW50QnlJZCIsInBhdHRlcm4iLCJpbm5lckhUTUwiLCJUZW1wbGF0ZTciLCJjb21waWxlIiwid2luZG93IiwiZG9jdW1lbnQiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsQ0FBRSxhQUFLO0FBQ0osYUFBU0EsUUFBVCxDQUFrQkMsRUFBbEIsRUFBc0JDLElBQXRCLEVBQTRCO0FBQ3hCLFlBQUlDLEVBQUVDLGNBQUYsQ0FBaUJILEVBQWpCLE1BQXlCLElBQTdCLEVBQW1DO0FBQy9CLGdCQUFNSSxVQUFVRixFQUFFQyxjQUFGLENBQWlCSCxFQUFqQixFQUFxQkssU0FBckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQU9DLFVBQVVDLE9BQVYsQ0FBa0JILE9BQWxCLEVBQTJCSCxRQUFRLEVBQW5DLENBQVA7QUFDSDs7QUFFRCxlQUFPLEVBQVA7QUFDSDs7QUFFRE8sV0FBT1QsUUFBUCxHQUFrQkEsUUFBbEI7QUFDSCxDQWpCQSxFQWlCR1UsUUFqQkgiLCJmaWxlIjoiX3RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiOygoZCA9PiB7XG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoaWQsIGRhdGEpIHtcbiAgICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gZC5nZXRFbGVtZW50QnlJZChpZCkuaW5uZXJIVE1MO1xuXG4gICAgICAgICAgICAvLyBpZiAoIXdpbmRvdy5wcmVjb21waWxlZFQ3KSB7XG4gICAgICAgICAgICAvLyAgICAgd2luZG93LnByZWNvbXBpbGVkVDcgPSBUZW1wbGF0ZTcuY29tcGlsZShwYXR0ZXJuKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIHJldHVybiB3aW5kb3cucHJlY29tcGlsZWRUNyhkYXRhIHx8IHt9KTtcblxuICAgICAgICAgICAgcmV0dXJuIFRlbXBsYXRlNy5jb21waWxlKHBhdHRlcm4pKGRhdGEgfHwge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHdpbmRvdy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xufSkpKGRvY3VtZW50KTsiXX0=

//# sourceMappingURL=data:application/json;charset=utf8;base64,
